// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using EnrouteAPI.LUAS;
//
//    var allLuasStops = AllLuasStops.FromJson(jsonString);

namespace EnrouteAPI.LUAS.Input
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AllLuasStops
    {
        [JsonProperty("Stops")]
        public List<LuasStop> Stops { get; set; }
    }

    public partial class LuasStop
    {
        [JsonProperty("Text")]
        public string Text { get; set; }

        [JsonProperty("Abrev")]
        public string Abrev { get; set; }

        [JsonProperty("Line")]
        public Line Line { get; set; }

        [JsonProperty("Lat")]
        public string Lat { get; set; }

        [JsonProperty("Long")]
        public string Long { get; set; }
    }

    public enum Line { LuasGreenLine, LuasRedLine };

    public partial class AllLuasStops
    {
        public static AllLuasStops FromJson(string json) => JsonConvert.DeserializeObject<AllLuasStops>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AllLuasStops self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                LineConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class LineConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Line) || t == typeof(Line?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Luas Green Line":
                    return Line.LuasGreenLine;
                case "Luas Red Line":
                    return Line.LuasRedLine;
            }
            throw new Exception("Cannot unmarshal type Line");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Line)untypedValue;
            switch (value)
            {
                case Line.LuasGreenLine:
                    serializer.Serialize(writer, "Luas Green Line");
                    return;
                case Line.LuasRedLine:
                    serializer.Serialize(writer, "Luas Red Line");
                    return;
            }
            throw new Exception("Cannot marshal type Line");
        }

        public static readonly LineConverter Singleton = new LineConverter();
    }
}
